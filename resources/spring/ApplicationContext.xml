<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd
	">
	
	<!-- 启用注解 -->
	<context:annotation-config />
	
	<!-- 启动组件扫描，排除@Controller组件，该组件由SpringMVC配置文件扫描 -->
	<context:component-scan base-package="com.yizhan">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">   
    	<property name="dataSource" ref="dataSource"></property>
 	</bean>
	
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
		<property name="locations">  
			<list>  
                 <value>/WEB-INF/classes/dbconfig.properties</value>  
            </list>  
        </property>  
	</bean> 
	
	<!-- 阿里 druid数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">  
         <!-- 数据库基本信息配置 -->
         <property name="url" value="${database.url}" />  
         <property name="username" value="${database.username}" />  
         <property name="password" value="${database.password}" />  
         <property name="driverClassName" value="${database.driverClassName}" />  
         <property name="filters" value="${database.filters}" />  
   		 <!-- 最大并发连接数 -->
         <property name="maxActive" value="${database.maxActive}" />
         <!-- 初始化连接数量 -->
         <property name="initialSize" value="${database.initialSize}" />
         <!-- 配置获取连接等待超时的时间 -->
         <property name="maxWait" value="${database.maxWait}" />
         <!-- 最小空闲连接数 -->
         <property name="minIdle" value="${database.minIdle}" />  
         <!-- 最大空闲连接数 -->
         <property name="maxIdle" value="${database.maxIdle}" />  
   		 <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
         <property name="timeBetweenEvictionRunsMillis" value="${database.timeBetweenEvictionRunsMillis}" />
         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
         <property name="minEvictableIdleTimeMillis" value="${database.minEvictableIdleTimeMillis}" />  
         <property name="validationQuery" value="${database.validationQuery}" />  
         <property name="testWhileIdle" value="${database.testWhileIdle}" />  
         <property name="testOnBorrow" value="${database.testOnBorrow}" />  
         <property name="testOnReturn" value="${database.testOnReturn}" />  
         <property name="maxOpenPreparedStatements" value="${database.maxOpenPreparedStatements}" />
         <!-- 打开removeAbandoned功能 -->
         <property name="removeAbandoned" value="${database.removeAbandoned}" />
         <!-- 1800秒，也就是30分钟 -->
         <property name="removeAbandonedTimeout" value="${database.removeAbandonedTimeout}" />
         <!-- 关闭abanded连接时输出错误日志 -->   
         <property name="logAbandoned" value="${database.logAbandoned}" />
	</bean>   
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- 事物处理 -->
	<aop:config>
		<aop:pointcut id="pc" expression="execution(* com.yizhan.service..*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>
	
	<!-- 配置缓存管理器工厂 -->
	  <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
	      <property name="configLocation" value="classpath:ehcache.xml" />
	      <property name="shared" value="true" />
	  </bean>
	  <!-- 配置缓存工厂，缓存名称为myCache -->
	  <bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
	      <property name="cacheName" value="myCache" />
	      <property name="cacheManager" ref="cacheManager" />
	 </bean>
	
	<!-- 配置mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
        <!-- mapper扫描 -->
        <property name="mapperLocations" value="classpath:mybatis/*/*.xml"></property>
    </bean>
    
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<!-- ================ Shiro start ================ -->
		<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
			<property name="realm" ref="ShiroRealm" />
			<!-- 
			after by yym
			<property name="sessionManager" ref="sessionManager"/> -->
		</bean>
		
		
		<!-- 会话验证调度器 -->
		<!--<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
		    <property name="sessionValidationInterval" value="1800000"/>
		    <property name="sessionManager" ref="sessionManager"/>
		</bean> -->
		
		<!-- after end -->
		
		<!-- 項目自定义的Realm -->
	    <bean id="ShiroRealm" class="com.yizhan.interceptor.shiro.ShiroRealm" ></bean>
		
		<!-- Shiro Filter -->
		<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
			<property name="securityManager" ref="securityManager" />
			
			<property name="loginUrl" value="/" />
			
			<property name="successUrl" value="/main/index" />
			
		<!-- 	<property name="unauthorizedUrl" value="/login_toLogin" /> -->
			
			<property name="filterChainDefinitions">
				<value>
				/static/**							= anon
				/static/zhaoyiwang/** 	            = anon
				/static/login/** 	                = anon
				/static/js/myjs/** 	                = authc
				/static/js/** 		                = anon
				/resource/** 		                = anon
				/uploadFiles/**/**/**/**/**/** 		= anon
	           	/code.do 			                = anon
	           	/login_login	 	                = anon
	           	/app**/** 			                = anon
	           	/weixin/** 			                = anon
	           	/group/** 			                = anon
	           	/tracke/** 			                = anon
	           	/api/** 			                = anon
	           	/**					                = anon
				</value>
			</property>
		</bean>
	<!-- ================ Shiro end ================ -->
	
   
</beans>
